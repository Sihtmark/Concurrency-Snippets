import UIKit
import PlaygroundSupport
PlaygroundPage.current.needsIndefiniteExecution = true

// MARK: –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –°—Ä–µ–¥–∞

// –í –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–¥–∞–Ω–∏—è task –≤—ã–±–µ—Ä–µ–º –ø–µ—á–∞—Ç—å –ª—é–±—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏. –ï—â–µ –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ taskHIGH –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –º—ã –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º:

// tasks:
func task(_ symbol: String) {
    for i in 1...10 {
        print("\(symbol) \(i) prioritate = \(qos_class_self().rawValue)")
    }
}
func taskHIGH(_ symbol: String) {
    print("\(symbol) prioritate = \(qos_class_self().rawValue)")
}


// MARK: private –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ concurrent –æ—á–µ—Ä–µ–¥–∏

// –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Private –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é (.concurrent) –æ—á–µ—Ä–µ–¥—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Private –æ—á–µ—Ä–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ attributes —Ä–∞–≤–Ω–æ–µ .concurrent. –ï—Å–ª–∏ –≤—ã –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —ç—Ç–æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç, —Ç–æ Private –æ—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π (.serial). –ê—Ä–≥—É–º–µ–Ω—Ç qos —Ç–∞–∫–∂–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω –±–µ–∑ –≤—Å—è–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.

// –î–∞–≤–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–∏–º –Ω–∞—à–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ workerQueue –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è qos, —Ä–∞–≤–Ω–æ–µ .userInitiated, –∏ –ø–æ—Å—Ç–∞–≤–∏–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ —ç—Ç—É –æ—á–µ—Ä–µ–¥—å —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è task("üòÄ"), –∞ –ø–æ—Ç–æ–º task("üòà")
 
// –ù–∞—à–∞ –Ω–æ–≤–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å workerQueue –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π, –∏ –∑–∞–¥–∞–Ω–∏—è –≤ –Ω–µ–π –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, —Ö–æ—Ç—è –≤—Å–µ, —á—Ç–æ –º—ã —Å–¥–µ–ª–∞–ª–∏ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ —á–µ—Ç–≤–µ—Ä—Ç—ã–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–º (–æ–¥–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å serialPriorityQueue), —ç—Ç–æ –∑–∞–¥–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç attributes —Ä–∞–≤–Ω–æ–º .concurrent:

print("--------------------------------------")
print("Private .concurrent Q - .userInitiated")
print("--------------------------------------")

let workerQueue = DispatchQueue(label: "com.bescora.worker_concurrent", qos: .userInitiated, attributes: .concurrent)
workerQueue.async { task("üòÄ") }
workerQueue.async { task("üòà") }

sleep(2)

// –ö–∞—Ä—Ç–∏–Ω–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –¥—Ä—É–≥–∞—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é. –ï—Å–ª–∏ —Ç–∞–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–æ –¥–ª—è –Ω–∞—à–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π (–º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π) –æ—á–µ—Ä–µ–¥–∏ workerQueue, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç ¬´—Ä–∞—Å—â–µ–ø–ª—è—Ç—å—Å—è¬ª –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤, –∑–∞–¥–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å —Å–∏–º–≤–æ–ª–æ–º "üòà", –±—É–¥—É—á–∏ –ø–æ–∑–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å workerQueue, –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.

// –î–∞–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ Private –æ—á–µ—Ä–µ–¥–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏:

// –æ—á–µ—Ä–µ–¥—å workerQueue1 c qos .userInitiated
// –æ—á–µ—Ä–µ–¥—å workerQueue2 c qos .background

print("-------------------------------")
print(".concurrent Q1 - .userInitiated")
print(".concurrent Q1 - .background   ")
print("-------------------------------")

let workerQueue1 = DispatchQueue(label: "com.bestcora.worker_concurrent1", qos: .userInitiated, attributes: .concurrent)
let workerQueue2 = DispatchQueue(label: "com.bestcora.worker_concurrent2", qos: .background, attributes: .concurrent)

workerQueue2.async { task("üòÄ") }
workerQueue1.async { task("üòà") }

// –ó–¥–µ—Å—å —Ç–∞–∫–∞—è –∂–µ –∫–∞—Ä—Ç–∏–Ω–∞, –∫–∞–∫ –∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ Private –æ—á–µ—Ä–µ–¥—è–º–∏ –≤–æ –≤—Ç–æ—Ä–æ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ. –ú—ã –≤–∏–¥–∏–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏—è —á–∞—â–µ –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥–∏ workerQueue1, –∏–º–µ—é—â–µ–π –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.

// –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏ —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å –ø–æ–º–æ—â—å—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞ attributes, –∞ –∑–∞—Ç–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –Ω–µ–π –≤ –ª—é–±–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è c –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ activate():

print("---------------------------------------------------------")
print("      –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º      ")
print("Private .concurrent Q - .userInitiated, initiallyInactive")
print("---------------------------------------------------------")

let workerDelayQueue = DispatchQueue(label: "com.bescora.worker_concurrent", qos: .userInitiated, attributes: [.concurrent,.initiallyInactive])

workerDelayQueue.async { task("üòÄ") }
workerDelayQueue.async { task("üòà") }

print("-----------------------------------------")
print("–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏")
print("       —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º          ")
print("-----------------------------------------")

workerDelayQueue.activate()
