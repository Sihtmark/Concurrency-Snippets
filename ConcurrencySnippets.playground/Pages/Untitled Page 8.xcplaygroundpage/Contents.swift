import UIKit
import PlaygroundSupport
PlaygroundPage.current.needsIndefiniteExecution = true

// MARK: –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –°—Ä–µ–¥–∞

// MARK: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –û—á–µ—Ä–µ–¥–∏ –∏ –ó–∞–¥–∞–Ω–∏—è

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è background tasks –∫–æ–≥–¥–∞ main thread –±—É–¥–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–∞

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ global queues

// 1. –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è (serial) main queue
let mainQueue = DispatchQueue.main

// 2. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ Concurrent dispatch queues
let userInteractiveQueue = DispatchQueue.global(qos: .userInteractive)
let userQueue = DispatchQueue.global(qos: .userInitiated)
let defaultQueue = DispatchQueue.global()
let utilityQueue = DispatchQueue.global(qos: .utility)
let backgroundQueue = DispatchQueue.global(qos: .background)

// –í –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–¥–∞–Ω–∏—è task –≤—ã–±–µ—Ä–µ–º –ø–µ—á–∞—Ç—å –ª—é–±—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏. –ï—â–µ –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ taskHIGH –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –º—ã –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º:

// tasks:
func task(_ symbol: String) {
    for i in 1...10 {
        print("\(symbol) \(i) prioritate = \(qos_class_self().rawValue)")
    }
}
func taskHIGH(_ symbol: String) {
    print("\(symbol) prioritate = \(qos_class_self().rawValue)")
}


// MARK: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã QOS –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π

// –î–∞–≤–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–∏–º –Ω–∞—à–µ–π Private –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ serialPriorityQueue –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è qos, —Ä–∞–≤–Ω–æ–µ .userInitiated, –∏ –ø–æ—Å—Ç–∞–≤–∏–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ —ç—Ç—É –æ—á–µ—Ä–µ–¥—å —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è –∞ –ø–æ—Ç–æ–º —ç—Ç–æ—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —É–±–µ–¥–∏—Ç –Ω–∞—Å –≤ —Ç–æ–º, —á—Ç–æ –Ω–∞—à–∞ –Ω–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å serialPriorityQueue –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π, –∏ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ async –º–µ—Ç–æ–¥–∞, –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:

print("-----------------------------------")
print("Private .serial Q1 - .userInitiated")
print("-----------------------------------")

let serialPriorityQueue = DispatchQueue(label: "com.bestcora.serialPriority", qos: .userInitiated)

serialPriorityQueue.async { task("üòÄ") }
serialPriorityQueue.async { task("üòà") }

sleep(1)

// –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ async, –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –º–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–æ–≤ –ª–∏–±–æ –∑–∞ —Å—á–µ—Ç —Ä–∞–∑–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π, –ª–∏–±–æ –∑–∞ —Å—á–µ—Ç —Ç–æ–≥–æ, —á—Ç–æ —Å–∞–º–∞ –æ—á–µ—Ä–µ–¥—å —è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π (.concurrent). –ù–∏–∂–µ –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–µ 5 —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ (.concurrent) –æ—á–µ—Ä–µ–¥—è–º–∏ –º—ã —É–≤–∏–¥–∏–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å Private –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π (.concurrent) –æ—á–µ—Ä–µ–¥—å—é workerQueue, –Ω–æ —Ç–∞–º –±—É–¥–µ—Ç —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–∞—è –∫–∞—Ä—Ç–∏–Ω–∞, –∫–æ–≥–¥–∞ –º—ã –±—É–¥–µ–º –ø–æ–º–µ—â–∞—Ç—å –≤ —ç—Ç—É –æ—á–µ—Ä–µ–¥—å —Ç–µ –∂–µ —Å–∞–º—ã–µ –∑–∞–¥–∞–Ω–∏—è.

// –î–∞–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ Private –æ—á–µ—Ä–µ–¥–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —ç—Ç—É –æ—á–µ—Ä–µ–¥–∏ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏–π task("üòÄ"), –∞ –ø–æ—Ç–æ–º –∑–∞–¥–∞–Ω–∏–π task("üòà")

// –æ—á–µ—Ä–µ–¥—å serialPriorityQueue1 c qos .userInitiated

// –æ—á–µ—Ä–µ–¥—å serialPriorityQueue2 c qos .background

print("-----------------------------------")
print("Private .serial Q1 - .userInitiated")
print("  Private .serial Q1 - .background ")
print("-----------------------------------")

let serialPriorityQueue1 = DispatchQueue(label: "com.bestcora.serialPriority", qos: .userInitiated)
let serialPriorityQueue2 = DispatchQueue(label: "com.bestcora.serialPriority", qos: .background)

serialPriorityQueue2.async { task("üòÄ") }
serialPriorityQueue1.async { task("üòà") }

sleep(1)

// –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π, –∏ –∑–∞–¥–∞–Ω–∏—è —á–∞—â–µ –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥–∏ serialPriorityQueue1, –∏–º–µ—é—â–µ–π –±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è qos: .userIniatated.

// –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–µ—Ä–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ª—é–±–æ–π –æ—á–µ—Ä–µ–¥–∏ DispatchQueue –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ now() + 0.1 —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ asyncAfter –∏ –µ—â–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏ —ç—Ç–æ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è qos:

print("--------------------------------")
print("asyncAfter (.userInteractive) Q2")
print("  Private .serial Q1 - .utility ")
print("Private .serial Q1 - .background")
print("--------------------------------")

let serialUtilityQueue = DispatchQueue(label: "com.bestcora.serialUtilityPriority", qos: .utility)
let serialBackgroundQueue = DispatchQueue(label: "com.bestcora.serialBackgroundPriority", qos: .background)

serialBackgroundQueue.asyncAfter(deadline: .now() + 0.1, qos: .userInteractive) { task("üòÄ") }
serialUtilityQueue.async { task("üòà") }

sleep(1)
